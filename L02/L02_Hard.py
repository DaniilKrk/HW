# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y
# Не понял :(



# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'

while True:
    date = input("Введите дату [dd.mm.yyyy]")
    if len(date) == 10 and date[2] == '.' and date[5] == '.':
        day = int(date[0:2])
        month = int(date[3:5])
        year = int(date[-4:])
        #print("Проверка даты")
        if 0 < year < 9999 and 0 < month < 13 and day > 0:
            #print("Базовые требования - ОК. Проверка числа.")
            if month == 2 and day < 29:
                print(f"Число: {day} Месяц: {month} Год: {year}")
                break
            elif month < 7 and month != 2 and month % 2 == 0 and day < 32:
                print(f"Число: {day} Месяц: {month} Год: {year}")
                break
            elif month < 7 and month != 2 and month % 2 != 0 and day < 31:
                print(f"Число: {day} Месяц: {month} Год: {year}")
                break
            elif month > 7 and month % 2 == 0 and day < 32:
                print(f"Число: {day} Месяц: {month} Год: {year}")
                break
            elif month > 7 and month % 2 != 0 and day < 31:
                print(f"Число: {day} Месяц: {month} Год: {year}")
                break    
    print("Неверный формат. Попробуйте еще.")


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

while True:
    room_target = int(input("Какая комната нужна?\n"))
    stage = 1
    floor = 1
    rooms = room_target
    completed_stages = 0
    while rooms > stage ** 2:
        rooms = rooms - stage ** 2
        #print(f"Stage: {stage}\nRoom: {rooms}")
        stage += 1
        floor += stage
    floor -= stage - 1
    #print(f"Stage: {stage} \nRoom № on cur stage: {rooms}\nFloors before cur stage: {floor}")
    while True:
        if rooms > stage:
            rooms = rooms - stage
            floor += 1
        else:
            break
    print(f"Комната {room_target} находится на {floor} этаже. Это {rooms}-ая комната на этаже.")
    
"""
# Медленный способ. Изначально идея была в том, что бы создать многомерный список, который можно было бы после создания сохранить и добавить в качестве переменной.
# Но даже после отказа от создания списка всех комнат (2 000 000 000) оно работало слишком медленно :(

while rooms < room_target:
    cur_room = 0
    while cur_room < stage ** 2 and room < room_target:
        tower = []
        cur_floor_room = 1
        while cur_floor_room <= stage and room < room_target:
            rooms += 1
            tower.append(room)
            cur_floor_room += 1
            cur_room += 1
        floor += 1
    stage += 1
print(f"Этаж: {floor}\n{cur_floor_room - 1} слева")
"""

